import os
import sys
import time
import psutil
from tkinter import *
from tkinter import ttk, messagebox
import datetime

class KeyloggerDetector:
    def __init__(self, root):
        self.root = root
        self.root.title("Keylogger Detector")
        self.root.geometry("600x450")
        self.root.resizable(False, False)
        self.center_window(self.root)

        self.keyloggers = {
            "keylogger": "Generic Keylogger",
            "logger": "System Logger",
            "spy": "Spy Software",
            "recorder": "Keystroke Recorder",
            "ahk.exe": "AutoHotkey (Potential Keylogger)",
            "hook": "Keyboard Hook",
            "logkeys": "LogKeys Keylogger",
            "kidlogger": "KidLogger",
            "refog": "Refog Keylogger",
            "perfectkeylogger": "Perfect Keylogger",
            "allinonekeylogger": "All-in-One Keylogger"
        }

        self.show_welcome_page()

    def center_window(self, window):
        window.update_idletasks()
        width = window.winfo_width()
        height = window.winfo_height()
        x = (window.winfo_screenwidth() // 2) - (width // 2)
        y = (window.winfo_screenheight() // 2) - (height // 2)
        window.geometry(f'+{x}+{y}')

    def show_welcome_page(self):
        self.clear_window()

        welcome_frame = Frame(self.root, bg="#1c1c1c")
        welcome_frame.pack(fill=BOTH, expand=True)

        Label(welcome_frame, text="KEYLOGGER DETECTOR",
              font=("Helvetica", 18, "bold"), fg="#FF4141", bg="#1c1c1c").pack(pady=20)

        Label(welcome_frame, text="Protect your privacy from keystroke tracking threats.",
              font=("Helvetica", 11), fg="white", bg="#1c1c1c").pack(pady=5)

        Button(welcome_frame, text="Start Scan", font=("Arial", 12, "bold"), bg="#00BFA6", fg="white", width=20,
               command=self.create_main_page).pack(pady=10)

        Button(welcome_frame, text="View Running Processes", font=("Arial", 10), width=25,
               command=self.show_running_processes).pack(pady=5)

        Button(welcome_frame, text="System Health Info", font=("Arial", 10), width=25,
               command=self.show_system_info).pack(pady=5)

        Button(welcome_frame, text="Exit", font=("Arial", 11), width=15,
               command=self.confirm_exit).pack(pady=10)

    def clear_window(self):
        for widget in self.root.winfo_children():
            widget.destroy()

    def create_main_page(self):
        self.clear_window()

        main_frame = Frame(self.root, padx=20, pady=20)
        main_frame.pack(expand=True, fill=BOTH)

        Label(main_frame, text="Keylogger Detection Tool", font=("Arial", 16, "bold")).pack(pady=(0, 30))

        Button(main_frame, text="Detect Keylogger", font=("Arial", 12), width=20,
               command=self.detect_keylogger).pack(pady=10)

        Button(main_frame, text="Back to Home", font=("Arial", 12), width=20,
               command=self.show_welcome_page).pack(pady=10)

    def detect_keylogger(self):
        searching = Toplevel(self.root)
        searching.title("Keylogger Detector")
        searching.geometry("400x200")
        searching.resizable(False, False)
        self.center_window(searching)

        Label(searching, text="Administrator: C:\\Windows\\3", font=("Arial", 8), fg="gray").pack(anchor=NW, padx=10, pady=5)
        Label(searching, text="Searching for KeyLoggers...", font=("Arial", 12)).pack(pady=(20, 10))
        loading_label = Label(searching, text="Loading...... 0%", font=("Arial", 10))
        loading_label.pack()

        progress = ttk.Progressbar(searching, orient=HORIZONTAL, length=300, mode='determinate')
        progress.pack(pady=10)

        progress_text = Label(searching, text="0/100", font=("Arial", 8))
        progress_text.pack()

        time_text = Label(searching, text="[00:00<00:00, 0.00it/s]", font=("Arial", 8))
        time_text.pack()

        searching.update()
        self.update_progress(searching, progress, loading_label, progress_text, time_text)

        detected = self.scan_for_keyloggers()
        searching.destroy()

        if detected:
            self.show_detected_keyloggers(detected)
        else:
            messagebox.showinfo("Result", "No keylogger detected in your system.")

    def update_progress(self, window, progress, label, progress_text, time_text):
        total = 100
        start_time = time.time()

        for i in range(total + 1):
            progress['value'] = i
            label.config(text=f"Loading...... {i}%")
            progress_text.config(text=f"{i}/{total}")

            elapsed = time.time() - start_time
            if i > 0:
                its = i / elapsed
                remaining = (total - i) / its
                time_text.config(text=f"[{time.strftime('%M:%S', time.gmtime(elapsed))}<"
                                     f"{time.strftime('%M:%S', time.gmtime(remaining))}, "
                                     f"{its:.2f}it/s]")

            window.update()
            time.sleep(0.05)

    def scan_for_keyloggers(self):
        detected = []
        for proc in psutil.process_iter(['pid', 'name']):
            try:
                proc_name = proc.info['name'].lower()
                for kl_pattern, kl_name in self.keyloggers.items():
                    if kl_pattern in proc_name:
                        detected.append({
                            'pid': proc.info['pid'],
                            'process_name': proc.info['name'],
                            'keylogger_name': kl_name
                        })
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
        return detected

    def show_detected_keyloggers(self, processes):
        result_window = Toplevel(self.root)
        result_window.title("Keylogger Detected!")
        result_window.geometry("500x350")
        result_window.resizable(False, False)
        self.center_window(result_window)

        Label(result_window, text="Keylogger Detected!", font=("Arial", 14, "bold"), fg="red").pack(pady=10)

        frame = Frame(result_window)
        frame.pack(pady=5, padx=10, fill=BOTH, expand=True)

        canvas = Canvas(frame)
        scrollbar = Scrollbar(frame, orient="vertical", command=canvas.yview)
        scrollable_frame = Frame(canvas)

        scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        Label(scrollable_frame, text="Detected Keyloggers:", font=("Arial", 11, "underline")).pack(anchor=W, pady=5)

        for proc in processes:
            proc_frame = Frame(scrollable_frame, bd=1, relief=GROOVE, padx=5, pady=5)
            proc_frame.pack(fill=X, pady=2)

            Label(proc_frame, text=f"Name: {proc['keylogger_name']}", font=("Arial", 10, "bold"), fg="red").pack(anchor=W)
            Label(proc_frame, text=f"Process: {proc['process_name']} (PID: {proc['pid']})", font=("Arial", 9)).pack(anchor=W)

        Button(result_window, text="Terminate Keyloggers", font=("Arial", 11),
               command=lambda: self.deactivate_keyloggers(processes, result_window)).pack(pady=10)

    def deactivate_keyloggers(self, processes, window):
        success = []
        failed = []

        for proc in processes:
            try:
                p = psutil.Process(proc['pid'])
                p.terminate()
                success.append(proc)
            except Exception as e:
                failed.append((proc, str(e)))

        window.destroy()

        if success and not failed:
            messagebox.showinfo("Success", f"Successfully terminated {len(success)} keylogger(s)!")
        elif success and failed:
            message = f"Terminated {len(success)} keylogger(s).\nFailed:\n"
            for proc, error in failed:
                message += f"\n- {proc['keylogger_name']} (PID: {proc['pid']}): {error}"
            messagebox.showwarning("Partial Success", message)
        else:
            messagebox.showerror("Failure", "Could not terminate any keyloggers.")

    def show_running_processes(self):
        win = Toplevel(self.root)
        win.title("Running Processes")
        win.geometry("500x400")
        self.center_window(win)

        Label(win, text="Running Processes", font=("Arial", 14, "bold")).pack(pady=10)

        listbox = Listbox(win, width=60, height=20)
        listbox.pack(padx=10, pady=10)

        for proc in psutil.process_iter(['pid', 'name']):
            try:
                listbox.insert(END, f"{proc.info['name']} (PID: {proc.info['pid']})")
            except:
                pass

    def show_system_info(self):
        info = f"""
CPU Usage: {psutil.cpu_percent()}%
Memory Usage: {psutil.virtual_memory().percent}%
Total Processes: {len(psutil.pids())}
Boot Time: {datetime.datetime.fromtimestamp(psutil.boot_time()).strftime('%Y-%m-%d %H:%M:%S')}
"""
        messagebox.showinfo("System Health Info", info.strip())

    def confirm_exit(self):
        if messagebox.askokcancel("Exit", "Are you sure you want to exit?", icon=messagebox.WARNING):
            self.root.destroy()


if __name__ == "__main__":
    root = Tk()
    app = KeyloggerDetector(root)
    root.mainloop()
